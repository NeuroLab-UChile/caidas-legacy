# Generated by Django 4.2.14 on 2025-05-23 20:01

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(auto_now_add=True, verbose_name="date joined"),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "swappable": "AUTH_USER_MODEL",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="ActionLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("CREATE", "Creación"),
                            ("UPDATE", "Actualización"),
                            ("DELETE", "Eliminación"),
                            ("VIEW", "Visualización"),
                            ("LOGIN", "Inicio de sesión"),
                            ("LOGOUT", "Cierre de sesión"),
                            ("UPLOAD", "Subida de archivo"),
                            ("DOWNLOAD", "Descarga de archivo"),
                            ("OTHER", "Otra acción"),
                        ],
                        max_length=20,
                        verbose_name="Tipo de acción",
                    ),
                ),
                ("description", models.TextField(verbose_name="Descripción")),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="Dirección IP"
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(blank=True, null=True, verbose_name="User Agent"),
                ),
                (
                    "extra_data",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Datos adicionales"
                    ),
                ),
            ],
            options={
                "verbose_name": "Registro de Acción",
                "verbose_name_plural": "Registro de Acciones",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="ActivityNodeDescription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.TextField(
                        choices=[
                            ("CATEGORY_DESCRIPTION", "Category Description"),
                            ("TEXT_QUESTION", "Text Question"),
                            ("SINGLE_CHOICE_QUESTION", "Single Choice Question"),
                            ("MULTIPLE_CHOICE_QUESTION", "Multiple Choice Question"),
                            ("SCALE_QUESTION", "Scale Question"),
                            ("IMAGE_QUESTION", "Image Question"),
                            ("RESULT_NODE", "Result Node"),
                            ("WEEKLY_RECIPE_NODE", "Weekly Recipe Node"),
                            ("VIDEO_NODE", "Video Node"),
                            ("TEXT_NODE", "Text Node"),
                            ("IMAGE_NODE", "Image Node"),
                        ]
                    ),
                ),
                ("description", models.TextField()),
                (
                    "image",
                    models.ImageField(
                        blank=True, null=True, upload_to="activity_node_descriptions/"
                    ),
                ),
                ("first_button_text", models.TextField(blank=True, null=True)),
                ("second_button_text", models.TextField(blank=True, null=True)),
                ("first_button_node_id", models.IntegerField(blank=True, null=True)),
                ("second_button_node_id", models.IntegerField(blank=True, null=True)),
                (
                    "next_node_object_id",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ActivityNodeQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.TextField(
                        choices=[
                            ("CATEGORY_DESCRIPTION", "Category Description"),
                            ("TEXT_QUESTION", "Text Question"),
                            ("SINGLE_CHOICE_QUESTION", "Single Choice Question"),
                            ("MULTIPLE_CHOICE_QUESTION", "Multiple Choice Question"),
                            ("SCALE_QUESTION", "Scale Question"),
                            ("IMAGE_QUESTION", "Image Question"),
                            ("RESULT_NODE", "Result Node"),
                            ("WEEKLY_RECIPE_NODE", "Weekly Recipe Node"),
                            ("VIDEO_NODE", "Video Node"),
                            ("TEXT_NODE", "Text Node"),
                            ("IMAGE_NODE", "Image Node"),
                        ]
                    ),
                ),
                ("question", models.TextField()),
                (
                    "image",
                    models.ImageField(
                        blank=True, null=True, upload_to="activity_node_questions/"
                    ),
                ),
                ("result", models.JSONField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Appointment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Título")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Descripción"),
                ),
                ("date", models.DateTimeField(verbose_name="Fecha y Hora")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pendiente"),
                            ("CONFIRMED", "Confirmada"),
                            ("CANCELLED", "Cancelada"),
                            ("COMPLETED", "Completada"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Estado",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Creado"),
                ),
            ],
            options={
                "verbose_name": "Cita",
                "verbose_name_plural": "Citas",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="CategoryTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "icon",
                    models.ImageField(
                        blank=True, null=True, upload_to="health_categories_icons"
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "evaluation_type",
                    models.CharField(
                        choices=[
                            ("SELF", "Autoevaluación"),
                            ("PROFESSIONAL", "Evaluación Profesional"),
                            ("BOTH", "Ambas Evaluaciones"),
                        ],
                        default="SELF",
                        help_text="Define quién puede realizar la evaluación",
                        max_length=20,
                        verbose_name="Tipo de Evaluación",
                    ),
                ),
                (
                    "evaluation_form",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Formulario de autoevaluación en formato JSON",
                        null=True,
                    ),
                ),
                (
                    "default_recommendations",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Recomendaciones predeterminadas según el color de estado",
                        null=True,
                    ),
                ),
                (
                    "training_form",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Formulario de entrenamiento en formato JSON",
                        null=True,
                    ),
                ),
                (
                    "allowed_editor_roles",
                    models.JSONField(
                        default=list,
                        help_text="Roles que pueden editar instancias basadas en este template",
                        verbose_name="Roles con permiso de edición",
                    ),
                ),
                (
                    "is_readonly",
                    models.BooleanField(
                        default=False,
                        help_text="Si está activo, todas las instancias serán de solo lectura independientemente de los roles",
                        verbose_name="Solo lectura global",
                    ),
                ),
                (
                    "evaluation_tags",
                    models.JSONField(
                        default=list,
                        help_text="Etiquetas para la evaluación",
                        verbose_name="Etiquetas de evaluación",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dominio",
                "verbose_name_plural": "Dominios",
            },
        ),
        migrations.CreateModel(
            name="CategoryTemplateEditor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "editable_fields",
                    models.JSONField(
                        default=list,
                        help_text="Lista de campos que el usuario puede editar",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": ("Template de Dominio",),
                "verbose_name_plural": ("Templates de Dominio",),
            },
        ),
        migrations.CreateModel(
            name="EvaluationForm",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "responses",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Respuestas del usuario",
                        null=True,
                    ),
                ),
                (
                    "professional_responses",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Respuestas del profesional",
                        null=True,
                    ),
                ),
                ("completed_date", models.DateTimeField(blank=True, null=True)),
                ("is_draft", models.BooleanField(default=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("question_nodes", models.JSONField(blank=True, null=True)),
            ],
            options={
                "db_table": "prevcad_evaluation_form",
            },
        ),
        migrations.CreateModel(
            name="HealthCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("evaluation_history", models.JSONField(default=list)),
            ],
            options={
                "verbose_name": "Perfil de Salud",
                "verbose_name_plural": "Perfiles de Salud",
                "ordering": [
                    "-evaluation_form__completed_date",
                    "recommendation__is_draft",
                    "-user__user__last_name",
                    "-template__allowed_editor_roles",
                ],
            },
        ),
        migrations.CreateModel(
            name="HealthCategoryEditor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("added_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Editor de Categoría de Salud",
                "verbose_name_plural": "Editores de Categoría de Salud",
            },
        ),
        migrations.CreateModel(
            name="ImageNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.TextField(
                        choices=[
                            ("CATEGORY_DESCRIPTION", "Category Description"),
                            ("TEXT_QUESTION", "Text Question"),
                            ("SINGLE_CHOICE_QUESTION", "Single Choice Question"),
                            ("MULTIPLE_CHOICE_QUESTION", "Multiple Choice Question"),
                            ("SCALE_QUESTION", "Scale Question"),
                            ("IMAGE_QUESTION", "Image Question"),
                            ("RESULT_NODE", "Result Node"),
                            ("WEEKLY_RECIPE_NODE", "Weekly Recipe Node"),
                            ("VIDEO_NODE", "Video Node"),
                            ("TEXT_NODE", "Text Node"),
                            ("IMAGE_NODE", "Image Node"),
                        ]
                    ),
                ),
                (
                    "media_file",
                    models.ImageField(blank=True, null=True, upload_to="images/"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="QuestionNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.CharField(max_length=50)),
                ("question", models.TextField()),
                ("options", models.JSONField(blank=True, null=True)),
                ("required", models.BooleanField(default=False)),
                ("order", models.IntegerField(default=0)),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="Recommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(blank=True, null=True)),
                (
                    "status_color",
                    models.CharField(
                        choices=[
                            ("verde", "Verde"),
                            ("amarillo", "Amarillo"),
                            ("rojo", "Rojo"),
                            ("gris", "Gris"),
                        ],
                        default="gris",
                        max_length=20,
                    ),
                ),
                (
                    "video",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="recommendations/videos/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["mp4", "mov"]
                            )
                        ],
                    ),
                ),
                ("is_draft", models.BooleanField(default=True)),
                ("use_default", models.BooleanField(default=False)),
                ("updated_by", models.CharField(blank=True, max_length=255, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="ResultNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.TextField(
                        choices=[
                            ("CATEGORY_DESCRIPTION", "Category Description"),
                            ("TEXT_QUESTION", "Text Question"),
                            ("SINGLE_CHOICE_QUESTION", "Single Choice Question"),
                            ("MULTIPLE_CHOICE_QUESTION", "Multiple Choice Question"),
                            ("SCALE_QUESTION", "Scale Question"),
                            ("IMAGE_QUESTION", "Image Question"),
                            ("RESULT_NODE", "Result Node"),
                            ("WEEKLY_RECIPE_NODE", "Weekly Recipe Node"),
                            ("VIDEO_NODE", "Video Node"),
                            ("TEXT_NODE", "Text Node"),
                            ("IMAGE_NODE", "Image Node"),
                        ]
                    ),
                ),
                ("response", models.JSONField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TextNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.TextField(
                        choices=[
                            ("CATEGORY_DESCRIPTION", "Category Description"),
                            ("TEXT_QUESTION", "Text Question"),
                            ("SINGLE_CHOICE_QUESTION", "Single Choice Question"),
                            ("MULTIPLE_CHOICE_QUESTION", "Multiple Choice Question"),
                            ("SCALE_QUESTION", "Scale Question"),
                            ("IMAGE_QUESTION", "Image Question"),
                            ("RESULT_NODE", "Result Node"),
                            ("WEEKLY_RECIPE_NODE", "Weekly Recipe Node"),
                            ("VIDEO_NODE", "Video Node"),
                            ("TEXT_NODE", "Text Node"),
                            ("IMAGE_NODE", "Image Node"),
                        ]
                    ),
                ),
                ("content", models.TextField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TextRecomendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("theme", models.CharField(default="", max_length=100)),
                ("category", models.CharField(default="", max_length=100)),
                (
                    "sub_category",
                    models.CharField(blank=True, default="", max_length=100, null=True),
                ),
                ("learn", models.TextField(blank=True, default="", null=True)),
                ("remember", models.TextField(blank=True, default="", null=True)),
                ("data", models.TextField(blank=True, default="", null=True)),
                ("practic_data", models.TextField(blank=True, default="", null=True)),
                (
                    "context_explanation",
                    models.TextField(blank=True, default="", null=True),
                ),
                ("quote_link", models.URLField(blank=True, default="", null=True)),
                (
                    "keywords",
                    models.CharField(blank=True, default="", max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "text_recomendation",
            },
        ),
        migrations.CreateModel(
            name="ImageQuestion",
            fields=[
                (
                    "activitynodequestion_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="prevcad.activitynodequestion",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("prevcad.activitynodequestion",),
        ),
        migrations.CreateModel(
            name="MultipleChoiceQuestion",
            fields=[
                (
                    "activitynodequestion_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="prevcad.activitynodequestion",
                    ),
                ),
                ("options", models.JSONField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("prevcad.activitynodequestion",),
        ),
        migrations.CreateModel(
            name="ScaleQuestion",
            fields=[
                (
                    "activitynodequestion_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="prevcad.activitynodequestion",
                    ),
                ),
                ("min_value", models.IntegerField(blank=True, null=True)),
                ("max_value", models.IntegerField(blank=True, null=True)),
                ("step", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("prevcad.activitynodequestion",),
        ),
        migrations.CreateModel(
            name="SingleChoiceQuestion",
            fields=[
                (
                    "activitynodequestion_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="prevcad.activitynodequestion",
                    ),
                ),
                ("options", models.JSONField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("prevcad.activitynodequestion",),
        ),
        migrations.CreateModel(
            name="TextQuestion",
            fields=[
                (
                    "activitynodequestion_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="prevcad.activitynodequestion",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("prevcad.activitynodequestion",),
        ),
        migrations.CreateModel(
            name="WeeklyRecipeNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.TextField(
                        choices=[
                            ("CATEGORY_DESCRIPTION", "Category Description"),
                            ("TEXT_QUESTION", "Text Question"),
                            ("SINGLE_CHOICE_QUESTION", "Single Choice Question"),
                            ("MULTIPLE_CHOICE_QUESTION", "Multiple Choice Question"),
                            ("SCALE_QUESTION", "Scale Question"),
                            ("IMAGE_QUESTION", "Image Question"),
                            ("RESULT_NODE", "Result Node"),
                            ("WEEKLY_RECIPE_NODE", "Weekly Recipe Node"),
                            ("VIDEO_NODE", "Video Node"),
                            ("TEXT_NODE", "Text Node"),
                            ("IMAGE_NODE", "Image Node"),
                        ]
                    ),
                ),
                (
                    "title",
                    models.CharField(default="Plan Semanal WeTrain", max_length=200),
                ),
                (
                    "description",
                    models.TextField(default="Plan de alimentación personalizado"),
                ),
                (
                    "weekly_plan",
                    models.JSONField(
                        default=dict,
                        help_text='\n    Estructura esperada:\n    {\n        "MON": {\n            "BREAKFAST": {\n                "meal": "1 vaso de leche",\n                "proteins": "8g",\n                "notes": "Preferiblemente descremada"\n            },\n            "LUNCH": {...},\n            "DINNER": {...}\n        },\n        "TUE": {...},\n        ...\n    }\n    ',
                    ),
                ),
                (
                    "next_node",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="previous_node",
                        to="prevcad.weeklyrecipenode",
                    ),
                ),
            ],
            options={
                "verbose_name": "Plan Semanal",
                "verbose_name_plural": "Planes Semanales",
            },
        ),
        migrations.CreateModel(
            name="VideoNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.TextField(
                        choices=[
                            ("CATEGORY_DESCRIPTION", "Category Description"),
                            ("TEXT_QUESTION", "Text Question"),
                            ("SINGLE_CHOICE_QUESTION", "Single Choice Question"),
                            ("MULTIPLE_CHOICE_QUESTION", "Multiple Choice Question"),
                            ("SCALE_QUESTION", "Scale Question"),
                            ("IMAGE_QUESTION", "Image Question"),
                            ("RESULT_NODE", "Result Node"),
                            ("WEEKLY_RECIPE_NODE", "Weekly Recipe Node"),
                            ("VIDEO_NODE", "Video Node"),
                            ("TEXT_NODE", "Text Node"),
                            ("IMAGE_NODE", "Image Node"),
                        ]
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=200, null=True)),
                ("content", models.TextField(blank=True, null=True)),
                (
                    "media_file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="videos/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["mp4", "mov"]
                            )
                        ],
                    ),
                ),
                (
                    "next_node",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="previous_node",
                        to="prevcad.videonode",
                    ),
                ),
            ],
            options={
                "verbose_name": "Video",
                "verbose_name_plural": "Videos",
            },
        ),
        migrations.CreateModel(
            name="UserRecommendationInteraction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("clicks", models.IntegerField(default=1)),
                (
                    "last_clicked",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("first_seen", models.DateTimeField(auto_now_add=True)),
                (
                    "recommendation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="prevcad.textrecomendation",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=20, null=True)),
                ("birth_date", models.DateField(blank=True, null=True)),
                (
                    "specialty",
                    models.CharField(
                        blank=True,
                        help_text="Especialidad del profesional (si aplica)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="profile_images/",
                        verbose_name="Imagen de perfil",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Perfil de Usuario",
                "verbose_name_plural": "Perfiles de Usuario",
            },
        ),
        migrations.AddIndex(
            model_name="textrecomendation",
            index=models.Index(fields=["theme"], name="text_recome_theme_01351b_idx"),
        ),
        migrations.AddIndex(
            model_name="textrecomendation",
            index=models.Index(
                fields=["category"], name="text_recome_categor_d62139_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="textrecomendation",
            index=models.Index(
                fields=["sub_category"], name="text_recome_sub_cat_710bd0_idx"
            ),
        ),
        migrations.AddField(
            model_name="textnode",
            name="next_node",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="previous_node",
                to="prevcad.textnode",
            ),
        ),
        migrations.AddField(
            model_name="resultnode",
            name="next_node",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="previous_node",
                to="prevcad.resultnode",
            ),
        ),
        migrations.AddField(
            model_name="recommendation",
            name="health_category",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="recommendation",
                to="prevcad.healthcategory",
            ),
        ),
        migrations.AddField(
            model_name="questionnode",
            name="evaluation_form",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="nodes",
                to="prevcad.evaluationform",
            ),
        ),
        migrations.AddField(
            model_name="imagenode",
            name="next_node",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="previous_node",
                to="prevcad.imagenode",
            ),
        ),
        migrations.AddField(
            model_name="healthcategoryeditor",
            name="editor",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="prevcad.userprofile"
            ),
        ),
        migrations.AddField(
            model_name="healthcategoryeditor",
            name="health_category",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="prevcad.healthcategory"
            ),
        ),
        migrations.AddField(
            model_name="healthcategory",
            name="editors",
            field=models.ManyToManyField(
                blank=True,
                related_name="editable_categories",
                through="prevcad.HealthCategoryEditor",
                to="prevcad.userprofile",
            ),
        ),
        migrations.AddField(
            model_name="healthcategory",
            name="template",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="prevcad.categorytemplate",
                verbose_name="Plantilla",
            ),
        ),
        migrations.AddField(
            model_name="healthcategory",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="prevcad.userprofile",
                verbose_name="Usuario",
            ),
        ),
        migrations.AddField(
            model_name="evaluationform",
            name="health_category",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="evaluation_form",
                to="prevcad.healthcategory",
            ),
        ),
        migrations.AddField(
            model_name="categorytemplateeditor",
            name="template",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="prevcad.categorytemplate",
            ),
        ),
        migrations.AddField(
            model_name="categorytemplateeditor",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="prevcad.userprofile"
            ),
        ),
        migrations.AddField(
            model_name="categorytemplate",
            name="root_node",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="category_template",
                to="prevcad.activitynodedescription",
                verbose_name="Nodo raíz",
            ),
        ),
        migrations.AddField(
            model_name="appointment",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="appointments",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Usuario",
            ),
        ),
        migrations.AddField(
            model_name="activitynodequestion",
            name="next_node",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="previous_node",
                to="prevcad.activitynodequestion",
            ),
        ),
        migrations.AddField(
            model_name="activitynodedescription",
            name="next_node_content_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="actionlog",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
                verbose_name="Usuario",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddIndex(
            model_name="userrecommendationinteraction",
            index=models.Index(
                fields=["user", "recommendation"], name="prevcad_use_user_id_595026_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userrecommendationinteraction",
            index=models.Index(
                fields=["last_clicked"], name="prevcad_use_last_cl_0a3b3e_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userrecommendationinteraction",
            unique_together={("user", "recommendation")},
        ),
        migrations.AlterUniqueTogether(
            name="healthcategoryeditor",
            unique_together={("health_category", "editor")},
        ),
        migrations.AlterUniqueTogether(
            name="categorytemplateeditor",
            unique_together={("template", "user")},
        ),
        migrations.AddIndex(
            model_name="actionlog",
            index=models.Index(
                fields=["timestamp"], name="prevcad_act_timesta_2d09cb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="actionlog",
            index=models.Index(fields=["user"], name="prevcad_act_user_id_bea504_idx"),
        ),
        migrations.AddIndex(
            model_name="actionlog",
            index=models.Index(
                fields=["action_type"], name="prevcad_act_action__f04fff_idx"
            ),
        ),
    ]
